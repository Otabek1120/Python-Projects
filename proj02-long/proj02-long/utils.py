""" File: utils.py    Author: Otabek Abduraimov    Purpose: This set of functions read in an object file    and find the similarity between pieces of music.    Course #: CS 120, Fall 2021"""def read_file(obj):    """    This function reads in the already open    obj file and returns a list of tuples of song id,    song name, and song melody.    :param obj: a file of song id, info, and melody    """    song_nums_list = []    song_info_list = []    song_melody_list = []    count = 1    for line in obj:        line = line.split()        if count % 3 == 1:            song_num = int((line[1].lstrip("0")))            song_nums_list.append(song_num)            song_info = " ".join(line[2:]).strip()            song_info_list.append(song_info)            count += 1        elif count % 3 == 2:            song_melody = line            song_melody_list.append(song_melody)            count += 1        else:            count += 1    list_of_all = []    for i in range(len(song_nums_list)):        num = song_nums_list[i]        info = song_info_list[i]        melody = song_melody_list[i]        tuple_num_info_melody = num, info, melody        list_of_all.append(tuple_num_info_melody)    return list_of_alldef get_slices(data, n):    """    This one takes the song melody, and the size    of the slice from the user, and creates a slice    of length n.    :param data: The song melody    :param n: length of each slice given by the user    :return: a list of a list of length n    """    slices = []    for i in range(len(data)):        a_slice = data[i:i+n]        if len(a_slice) == n:            slices.append(a_slice)    return slicesdef compare_sets(a, b):    """    This one takes two sets and finds out    how similar they are in the scale of 0.0 to 1.0,    where 0.0 is no similarity and 1.0 is    most similar    :param a: set_1    :param b: set_1    :return: the similarity report as a float    """    intersection = len(a & b)    union = len(a | b)    return float(intersection) / uniondef create_set(data, n):    """    This one takes two parameters and creates a set of    strings of length of n    :param data: the song melody as a combination    of characters    :param n: the length of each string in the set    :return: sorted set of the slices of characters    """    slices_set = set()    slices = get_slices(data, n)    for elem in slices:        slices_set.add(" ".join(elem))    return sorted(slices_set)def compare_melodies(m1, m2, n):    """    This one takes three parameters.    :param m1: melody of the first song    :param m2: melody of another song to be compared with    :param n: the length of a slice    It compares how similar two melodies are using the compare_sets(a, b)    function.    :return: an int that shows the similarity report.    """    melody_1 = get_slices(m1, n)    melody_1_set = set()    for elem_1 in melody_1:        melody_1_set.add("".join(elem_1))    melody_2 = get_slices(m2, n)    melody_2_set = set()    for elem_2 in melody_2:        melody_2_set.add("".join(elem_2))    compare = compare_sets(melody_1_set, melody_2_set)    return compare